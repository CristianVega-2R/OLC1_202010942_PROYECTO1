
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 21 19:06:41 CST 2023
//----------------------------------------------------

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.Scanner;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 21 19:06:41 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\004\000\002\002\012\000\002\002" +
    "\003\000\002\003\004\000\002\003\004\000\002\003\003" +
    "\000\002\003\003\000\002\004\004\000\002\004\003\000" +
    "\002\005\011\000\002\006\006\000\002\010\007\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\003\000\002\007\003\000\002\011\005\000\002\011\005" +
    "\000\002\011\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\005\000\002\011\003\000\002\011\003\000\002" +
    "\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\006\003\004\006\006\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\076\001\002\000\006\005\012" +
    "\027\010\001\002\000\010\005\ufffb\012\ufffb\027\ufffb\001" +
    "\002\000\004\032\050\001\002\000\010\005\012\012\033" +
    "\027\010\001\002\000\004\010\014\001\002\000\010\005" +
    "\ufffc\012\ufffc\027\ufffc\001\002\000\004\027\015\001\002" +
    "\000\004\032\016\001\002\000\004\014\017\001\002\000" +
    "\006\025\022\032\021\001\002\000\004\011\031\001\002" +
    "\000\006\011\ufff1\017\027\001\002\000\010\011\ufff2\016" +
    "\023\017\024\001\002\000\004\025\026\001\002\000\006" +
    "\025\022\032\021\001\002\000\004\011\ufff4\001\002\000" +
    "\004\011\ufff5\001\002\000\006\025\022\032\021\001\002" +
    "\000\004\011\ufff3\001\002\000\010\005\ufff8\012\ufff8\027" +
    "\ufff8\001\002\000\010\005\ufffd\012\ufffd\027\ufffd\001\002" +
    "\000\004\012\035\001\002\000\010\005\ufffe\012\ufffe\027" +
    "\ufffe\001\002\000\004\012\036\001\002\000\004\012\037" +
    "\001\002\000\004\027\040\001\002\000\004\010\045\001" +
    "\002\000\006\007\043\027\040\001\002\000\006\007\ufff9" +
    "\027\ufff9\001\002\000\004\002\000\001\002\000\006\007" +
    "\ufffa\027\ufffa\001\002\000\004\026\046\001\002\000\004" +
    "\011\047\001\002\000\006\007\ufff7\027\ufff7\001\002\000" +
    "\004\014\051\001\002\000\024\006\052\020\057\021\055" +
    "\022\063\023\061\024\060\026\053\030\054\031\056\001" +
    "\002\000\004\027\074\001\002\000\026\006\uffea\011\uffea" +
    "\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\026\uffea\030" +
    "\uffea\031\uffea\001\002\000\026\006\uffe9\011\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\026\uffe9\030\uffe9\031" +
    "\uffe9\001\002\000\024\006\052\020\057\021\055\022\063" +
    "\023\061\024\060\026\053\030\054\031\056\001\002\000" +
    "\026\006\uffe8\011\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8" +
    "\024\uffe8\026\uffe8\030\uffe8\031\uffe8\001\002\000\024\006" +
    "\052\020\057\021\055\022\063\023\061\024\060\026\053" +
    "\030\054\031\056\001\002\000\024\006\052\020\057\021" +
    "\055\022\063\023\061\024\060\026\053\030\054\031\056" +
    "\001\002\000\024\006\052\020\057\021\055\022\063\023" +
    "\061\024\060\026\053\030\054\031\056\001\002\000\004" +
    "\011\065\001\002\000\024\006\052\020\057\021\055\022" +
    "\063\023\061\024\060\026\053\030\054\031\056\001\002" +
    "\000\026\006\uffee\011\uffee\020\uffee\021\uffee\022\uffee\023" +
    "\uffee\024\uffee\026\uffee\030\uffee\031\uffee\001\002\000\010" +
    "\005\ufff6\012\ufff6\027\ufff6\001\002\000\026\006\uffed\011" +
    "\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\026\uffed" +
    "\030\uffed\031\uffed\001\002\000\026\006\uffec\011\uffec\020" +
    "\uffec\021\uffec\022\uffec\023\uffec\024\uffec\026\uffec\030\uffec" +
    "\031\uffec\001\002\000\024\006\052\020\057\021\055\022" +
    "\063\023\061\024\060\026\053\030\054\031\056\001\002" +
    "\000\026\006\ufff0\011\ufff0\020\ufff0\021\ufff0\022\ufff0\023" +
    "\ufff0\024\ufff0\026\ufff0\030\ufff0\031\ufff0\001\002\000\024" +
    "\006\052\020\057\021\055\022\063\023\061\024\060\026" +
    "\053\030\054\031\056\001\002\000\026\006\uffef\011\uffef" +
    "\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\026\uffef\030" +
    "\uffef\031\uffef\001\002\000\004\007\075\001\002\000\026" +
    "\006\uffeb\011\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024" +
    "\uffeb\026\uffeb\030\uffeb\031\uffeb\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\010\005\012\010\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\033\010" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\040\006\041\001\001\000\002\001" +
    "\001\000\004\006\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\071\001\001\000\002\001\001\000\004" +
    "\011\067\001\001\000\004\011\066\001\001\000\004\011" +
    "\065\001\001\000\002\001\001\000\004\011\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\070\001\001\000\002\001\001" +
    "\000\004\011\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public static LinkedList errores = new LinkedList();
    public void syntax_error(Symbol s){
        System.out.println("Error...");
        errores.add(new Errores(s.left, s.right, (String) s.value));
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


    public static LinkedList conjuntos = new LinkedList();
    Conjunto conjunto = new Conjunto();
    public static LinkedList raices = new LinkedList();
    public static LinkedList tablas = new LinkedList();
    public static LinkedList lexemas = new LinkedList();
    
    Tabla tabla = new Tabla();
    public int idArbol = 0;
    public int idHoja = 1;

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXP ::= tsaltodelinea 
            {
              Arbol RESULT =null;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Arbol nodo = new Arbol("\"\n\"", idArbol);
        nodo.setHoja(idHoja);
        tabla.setFila(idHoja,"\"\n\"");
        idArbol++;
        idHoja++;
        RESULT = nodo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXP ::= tcomillasimple 
            {
              Arbol RESULT =null;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Arbol nodo = new Arbol("\"'\"", idArbol);
        nodo.setHoja(idHoja);
        tabla.setFila(idHoja,"\"'\"");
        idArbol++;
        idHoja++;
        RESULT = nodo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXP ::= cadena 
            {
              Arbol RESULT =null;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Arbol nodo = new Arbol(caracter, idArbol);
        nodo.setHoja(idHoja);
        tabla.setFila(idHoja,caracter);
        idArbol++;
        idHoja++;
        RESULT = nodo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXP ::= abrirllaves identificador cerrarllaves 
            {
              Arbol RESULT =null;
		int conjuntoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int conjuntoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String conjunto = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Arbol nodo = new Arbol(conjunto, idArbol);
        nodo.setHoja(idHoja);
        tabla.setFila(idHoja,conjunto);
        idArbol++;
        idHoja++;
        RESULT = nodo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXP ::= interrogacion EXP 
            {
              Arbol RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Arbol izq = (Arbol)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Arbol nodo = new Arbol("|", idArbol);
        idArbol++;

        nodo.ramaIzq = izq;
        Arbol epsilon = new Arbol("epsilon", idArbol);
        epsilon.setHoja(idHoja);
        tabla.setFila(idHoja,"epsilon");
        idHoja++;
        idArbol++;
        nodo.ramaDer = epsilon;
        nodo.setAnulabilidad();
        nodo.setPrimerosOr();
        nodo.setUltimosOr();
        RESULT = nodo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXP ::= asterisco EXP 
            {
              Arbol RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Arbol izq = (Arbol)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Arbol nodo = new Arbol("*", idArbol);
        idArbol++;
        nodo.ramaIzq = izq;
        nodo.setAnulabilidad();
        nodo.setPrimerosUltimos();
        tabla.setColumnas(izq.getUltimos(),izq.getPrimeros());
        RESULT = nodo;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXP ::= mas EXP 
            {
              Arbol RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Arbol izq = (Arbol)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Arbol nodo = new Arbol(".", idArbol);
        idArbol++;

        Arbol asterisco = new Arbol("*", idArbol);
        idArbol++;
        
        izq.idAux = idArbol;
        izq.idHojas = idHoja;
        izq.hojas = tabla;

        Arbol aux = izq.recorrerStack(izq);

        tabla = izq.hojas;
        idArbol = izq.idAux;
        idHoja = izq.idHojas;

        asterisco.ramaIzq = aux;
        asterisco.setAnulabilidad();
        asterisco.setPrimerosUltimos();
        tabla.setColumnas(asterisco.getUltimos(),asterisco.getPrimeros());
        
        nodo.ramaIzq = izq;
        nodo.ramaDer = asterisco;
        nodo.setAnulabilidad();
        nodo.setPrimerosAnd();
        nodo.setUltimosAnd();
        tabla.setColumnas(izq.getUltimos(),asterisco.getPrimeros());

        RESULT = nodo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXP ::= disyuncion EXP EXP 
            {
              Arbol RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Arbol izq = (Arbol)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Arbol der = (Arbol)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Arbol nodo = new Arbol("|", idArbol);
        idArbol++;
        nodo.ramaIzq = der;
        nodo.ramaDer = izq;
        nodo.setAnulabilidad();
        nodo.setPrimerosOr();
        nodo.setUltimosOr();
        RESULT = nodo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXP ::= concatenacion EXP EXP 
            {
              Arbol RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Arbol izq = (Arbol)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Arbol der = (Arbol)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Arbol nodo = new Arbol(".", idArbol);
        idArbol++;
        nodo.ramaIzq = izq;
        nodo.ramaDer = der;
        nodo.setAnulabilidad();
        nodo.setPrimerosAnd();
        nodo.setUltimosAnd();
        tabla.setColumnas(izq.getUltimos(),der.getPrimeros());
        RESULT = nodo;
 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NOTACION ::= guion 
            {
              Object RESULT =null;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                conjunto.setCaracter(caracter);

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOTACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NOTACION ::= caracter 
            {
              Object RESULT =null;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                conjunto.setCaracter(caracter);

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOTACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NOTACION ::= guion coma NOTACION 
            {
              Object RESULT =null;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                conjunto.setCaracter(caracter);

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOTACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NOTACION ::= caracter coma NOTACION 
            {
              Object RESULT =null;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                conjunto.setCaracter(caracter);

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOTACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NOTACION ::= caracter tilde caracter 
            {
              Object RESULT =null;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String inicio = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                conjunto.setRango(inicio, fin);
 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOTACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ER ::= identificador guion mayorque EXP puntoycoma 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int arbolleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int arbolright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Arbol arbol = (Arbol)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Arbol nodo1 = new Arbol("#", idArbol);
        nodo1.setHoja(0);
        tabla.setFila(0, "#");
        idArbol++;
        Arbol nodo2 = new Arbol(".", idArbol);
        nodo2.ramaIzq = arbol;
        nodo2.ramaDer = nodo1;
        nodo2.setAnulabilidad();
        nodo2.setPrimerosAnd();
        nodo2.setUltimosAnd();
        
        tabla.setColumnas(arbol.getUltimos(),nodo1.getPrimeros());
        Raiz raiz = new Raiz(nodo2,nombre);
        tablas.add(tabla);
        tabla = new Tabla();
        raices.add(raiz);


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ER",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LEXEMA ::= identificador dospuntos cadena puntoycoma 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 System.out.println(cadena.replace("\\", "")); lexemas.add(new Lexema(nombre,cadena.replace("\\", ""))); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LEXEMA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONJUNTO ::= conj dospuntos identificador guion mayorque NOTACION puntoycoma 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 conjunto.setNombre(nombre); conjuntos.add(conjunto); conjunto = new Conjunto();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONJUNTO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LEXEMAS ::= LEXEMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LEXEMAS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LEXEMAS ::= LEXEMAS LEXEMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LEXEMAS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // REGLAS ::= ER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REGLAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // REGLAS ::= CONJUNTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REGLAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // REGLAS ::= REGLAS ER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REGLAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // REGLAS ::= REGLAS CONJUNTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REGLAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= abrirllaves REGLAS porcentaje porcentaje porcentaje porcentaje LEXEMAS cerrarllaves 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

