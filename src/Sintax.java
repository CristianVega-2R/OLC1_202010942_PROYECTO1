
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 05 22:41:24 CST 2023
//----------------------------------------------------

import java_cup.runtime.Symbol;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 05 22:41:24 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\002\004\000\002\002\012\000\002\003" +
    "\004\000\002\003\004\000\002\003\003\000\002\003\003" +
    "\000\002\004\004\000\002\004\003\000\002\005\011\000" +
    "\002\006\006\000\002\010\007\000\002\007\005\000\002" +
    "\007\005\000\002\007\003\000\002\011\005\000\002\011" +
    "\005\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\011\005\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\066\000\004\006\005\001\002\000\004\002\070\001" +
    "\002\000\006\005\012\030\007\001\002\000\010\005\ufffc" +
    "\012\ufffc\030\ufffc\001\002\000\004\013\044\001\002\000" +
    "\010\005\012\012\027\030\007\001\002\000\010\005\ufffd" +
    "\012\ufffd\030\ufffd\001\002\000\004\010\013\001\002\000" +
    "\004\030\014\001\002\000\004\013\015\001\002\000\004" +
    "\015\016\001\002\000\004\026\020\001\002\000\004\011" +
    "\025\001\002\000\010\011\ufff4\017\021\020\022\001\002" +
    "\000\004\026\024\001\002\000\004\026\020\001\002\000" +
    "\004\011\ufff5\001\002\000\004\011\ufff6\001\002\000\010" +
    "\005\ufff9\012\ufff9\030\ufff9\001\002\000\010\005\ufffe\012" +
    "\ufffe\030\ufffe\001\002\000\004\012\031\001\002\000\010" +
    "\005\uffff\012\uffff\030\uffff\001\002\000\004\012\032\001" +
    "\002\000\004\012\033\001\002\000\004\030\034\001\002" +
    "\000\004\010\041\001\002\000\006\007\037\030\034\001" +
    "\002\000\006\007\ufffa\030\ufffa\001\002\000\004\002\000" +
    "\001\002\000\006\007\ufffb\030\ufffb\001\002\000\004\027" +
    "\042\001\002\000\004\011\043\001\002\000\006\007\ufff8" +
    "\030\ufff8\001\002\000\004\015\045\001\002\000\020\006" +
    "\055\021\054\022\052\023\051\024\050\025\046\027\047" +
    "\001\002\000\020\006\055\021\054\022\052\023\051\024" +
    "\050\025\046\027\047\001\002\000\022\006\uffed\011\uffed" +
    "\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\027\uffed\001" +
    "\002\000\020\006\055\021\054\022\052\023\051\024\050" +
    "\025\046\027\047\001\002\000\020\006\055\021\054\022" +
    "\052\023\051\024\050\025\046\027\047\001\002\000\020" +
    "\006\055\021\054\022\052\023\051\024\050\025\046\027" +
    "\047\001\002\000\004\011\062\001\002\000\020\006\055" +
    "\021\054\022\052\023\051\024\050\025\046\027\047\001" +
    "\002\000\004\030\056\001\002\000\004\007\057\001\002" +
    "\000\022\006\uffee\011\uffee\021\uffee\022\uffee\023\uffee\024" +
    "\uffee\025\uffee\027\uffee\001\002\000\020\006\055\021\054" +
    "\022\052\023\051\024\050\025\046\027\047\001\002\000" +
    "\022\006\ufff3\011\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3" +
    "\025\ufff3\027\ufff3\001\002\000\010\005\ufff7\012\ufff7\030" +
    "\ufff7\001\002\000\020\006\055\021\054\022\052\023\051" +
    "\024\050\025\046\027\047\001\002\000\022\006\ufff2\011" +
    "\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\027\ufff2" +
    "\001\002\000\022\006\ufff1\011\ufff1\021\ufff1\022\ufff1\023" +
    "\ufff1\024\ufff1\025\ufff1\027\ufff1\001\002\000\022\006\ufff0" +
    "\011\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\027" +
    "\ufff0\001\002\000\022\006\uffef\011\uffef\021\uffef\022\uffef" +
    "\023\uffef\024\uffef\025\uffef\027\uffef\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\066\000\004\002\003\001\001\000\002\001\001\000" +
    "\010\003\007\005\010\010\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\027\010\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\034\006\035\001\001\000\002\001\001\000\004\006\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\052\001\001\000\004\011" +
    "\066\001\001\000\002\001\001\000\004\011\065\001\001" +
    "\000\004\011\064\001\001\000\004\011\062\001\001\000" +
    "\002\001\001\000\004\011\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


    public static LinkedList conjuntos = new LinkedList();
    Conjunto conjunto = new Conjunto();
    public static LinkedList raices = new LinkedList();
    public static LinkedList tablas = new LinkedList();
    public static LinkedList lexemas = new LinkedList();
    Tabla tabla = new Tabla();
    public int idArbol = 0;
    public int idHoja = 1;

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXP ::= cadena 
            {
              Arbol RESULT =null;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Arbol nodo = new Arbol(caracter, idArbol);
        nodo.setHoja(idHoja);
        tabla.setFila(idHoja,caracter);
        idArbol++;
        idHoja++;
        RESULT = nodo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXP ::= abrirllaves identificador cerrarllaves 
            {
              Arbol RESULT =null;
		int conjuntoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int conjuntoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String conjunto = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Arbol nodo = new Arbol(conjunto, idArbol);
        nodo.setHoja(idHoja);
        tabla.setFila(idHoja,conjunto);
        idArbol++;
        idHoja++;
        RESULT = nodo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXP ::= interrogacion EXP 
            {
              Arbol RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Arbol izq = (Arbol)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Arbol nodo = new Arbol("?", idArbol);
        idArbol++;
        nodo.ramaIzq = izq;
        nodo.setAnulabilidad();
        nodo.setPrimerosUltimos();;
        RESULT = nodo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXP ::= asterisco EXP 
            {
              Arbol RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Arbol izq = (Arbol)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Arbol nodo = new Arbol("*", idArbol);
        idArbol++;
        nodo.ramaIzq = izq;
        nodo.setAnulabilidad();
        nodo.setPrimerosUltimos();
        tabla.setColumnas(izq.getUltimos(),izq.getPrimeros());
        RESULT = nodo;


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXP ::= mas EXP 
            {
              Arbol RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Arbol izq = (Arbol)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Arbol nodo = new Arbol("+", idArbol);
        idArbol++;
        nodo.ramaIzq = izq;
        nodo.setAnulabilidad();
        nodo.setPrimerosUltimos();
        tabla.setColumnas(izq.getUltimos(),izq.getPrimeros());
        RESULT = nodo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXP ::= disyuncion EXP EXP 
            {
              Arbol RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Arbol izq = (Arbol)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Arbol der = (Arbol)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Arbol nodo = new Arbol("|", idArbol);
        idArbol++;
        nodo.ramaIzq = der;
        nodo.ramaDer = izq;
        nodo.setAnulabilidad();
        nodo.setPrimerosOr();
        nodo.setUltimosOr();
        RESULT = nodo;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXP ::= concatenacion EXP EXP 
            {
              Arbol RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Arbol izq = (Arbol)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Arbol der = (Arbol)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Arbol nodo = new Arbol(".", idArbol);
        idArbol++;
        nodo.ramaIzq = izq;
        nodo.ramaDer = der;
        nodo.setAnulabilidad();
        nodo.setPrimerosAnd();
        nodo.setUltimosAnd();
        tabla.setColumnas(izq.getUltimos(),der.getPrimeros());
        RESULT = nodo;
 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NOTACION ::= caracter 
            {
              Object RESULT =null;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                conjunto.setCaracter(caracter);

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOTACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NOTACION ::= caracter coma NOTACION 
            {
              Object RESULT =null;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                conjunto.setCaracter(caracter);

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOTACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NOTACION ::= caracter tilde caracter 
            {
              Object RESULT =null;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String inicio = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                conjunto.setRango(inicio, fin);
 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOTACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ER ::= identificador guion mayorque EXP puntoycoma 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int arbolleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int arbolright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Arbol arbol = (Arbol)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Arbol nodo1 = new Arbol("#", idArbol);
        nodo1.setHoja(0);
        tabla.setFila(0, "#");
        idArbol++;
        Arbol nodo2 = new Arbol(".", idArbol);
        nodo2.ramaIzq = arbol;
        nodo2.ramaDer = nodo1;
        nodo2.setAnulabilidad();
        nodo2.setPrimerosAnd();
        nodo2.setUltimosAnd();
        
        tabla.setColumnas(arbol.getUltimos(),nodo1.getPrimeros());
        Raiz raiz = new Raiz(nodo2,nombre);
        tablas.add(tabla);
        tabla = new Tabla();
        raices.add(raiz);


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ER",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LEXEMA ::= identificador dospuntos cadena puntoycoma 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 lexemas.add(new Lexema(nombre,cadena)); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LEXEMA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONJUNTO ::= conj dospuntos identificador guion mayorque NOTACION puntoycoma 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 conjunto.setNombre(nombre); conjuntos.add(conjunto); conjunto = new Conjunto();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONJUNTO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LEXEMAS ::= LEXEMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LEXEMAS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LEXEMAS ::= LEXEMAS LEXEMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LEXEMAS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // REGLAS ::= ER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REGLAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // REGLAS ::= CONJUNTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REGLAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // REGLAS ::= REGLAS ER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REGLAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // REGLAS ::= REGLAS CONJUNTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REGLAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= abrirllaves REGLAS porcentaje porcentaje porcentaje porcentaje LEXEMAS cerrarllaves 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

